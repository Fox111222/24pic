{"version":3,"sources":["assets\\scripts\\cc_scripts\\WxBizDataCrypt.js"],"names":["crypto","require","WxBizDataCrypt","appId","sessionKey","prototype","descrytData","encrypteData","iv","Buffer","decipher","createDecipheriv","setAutoPadding","decoded","update","JSON","parse","err","Error","toString","watermark","appid","module","exports"],"mappings":";;;;;;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACvC,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACH;;AAEDF,cAAc,CAACG,SAAf,CAAyBC,WAAzB,GAAuC,UAASC,YAAT,EAAuBC,EAAvB,EAA2B;AAC9D,MAAIJ,UAAU,GAAG,IAAIK,MAAJ,CAAW,KAAKL,UAAhB,EAA4B,QAA5B,CAAjB;AACAG,EAAAA,YAAY,GAAG,IAAIE,MAAJ,CAAWF,YAAX,EAAyB,QAAzB,CAAf;AACAC,EAAAA,EAAE,GAAG,IAAIC,MAAJ,CAAWD,EAAX,EAAe,QAAf,CAAL;;AAEA,MAAI;AACA,QAAIE,QAAQ,GAAGV,MAAM,CAACW,gBAAP,CAAwB,aAAxB,EAAuCP,UAAvC,EAAmDI,EAAnD,CAAf;AACAE,IAAAA,QAAQ,CAACE,cAAT,CAAwB,IAAxB;AACA,QAAIC,OAAO,GAAGH,QAAQ,CAACI,MAAT,CAAgBP,YAAhB,EAA8B,QAA9B,EAAwC,MAAxC,CAAd;AACAM,IAAAA,OAAO,IAAIH,QAAQ,SAAR,CAAe,MAAf,CAAX;AACAG,IAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAV;AACH,GAND,CAME,OAAOI,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACE,QAAJ,EAAV,CAAN;AACH;;AACD,MAAGN,OAAO,CAACO,SAAR,CAAkBC,KAAlB,KAA4B,KAAKlB,KAApC,EAA2C;AACvC,UAAM,IAAIe,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,SAAOL,OAAP;AACH,CAnBD;;AAsBAS,MAAM,CAACC,OAAP,GAAiBrB,cAAjB","sourceRoot":"/","sourcesContent":["var crypto = require('crypto')\n\nfunction WxBizDataCrypt(appId, sessionKey) {\n    this.appId = appId;\n    this.sessionKey = sessionKey;\n}\n\nWxBizDataCrypt.prototype.descrytData = function(encrypteData, iv) {\n    var sessionKey = new Buffer(this.sessionKey, 'base64');\n    encrypteData = new Buffer(encrypteData, 'base64');\n    iv = new Buffer(iv, 'base64');\n\n    try {\n        var decipher = crypto.createDecipheriv('aes-128-cbc', sessionKey, iv);\n        decipher.setAutoPadding(true);\n        var decoded = decipher.update(encrypteData, 'binary', 'utf8');\n        decoded += decipher.final('utf8');\n        decoded = JSON.parse(decoded);\n    } catch (err) {\n        throw new Error(err.toString());\n    }\n    if(decoded.watermark.appid !== this.appId) {\n        throw new Error('appid not equal');\n    }\n\n    return decoded;\n}\n\n\nmodule.exports = WxBizDataCrypt"]}