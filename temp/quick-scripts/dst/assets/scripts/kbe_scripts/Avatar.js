
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/kbe_scripts/Avatar.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8e5789N1nFFkp/2ekHWYD9D', 'Avatar');
// scripts/kbe_scripts/Avatar.js

"use strict";

/*-----------------------------------------------------------------------------------------
												entity
-----------------------------------------------------------------------------------------*/
var KBEngine = require("kbengine");

KBEngine.Avatar = KBEngine.Entity.extend({
  __init__: function __init__() {
    this._super();

    if (this.isPlayer()) {
      cc.log("window.wx != undefined || window.wc=", window.wx != undefined);

      if (cc.sys.platform == cc.sys.WECHAT_GAME) {
        this.decodeEncryptedData();
      }

      cc.log("KBEngine.Avatar._init_");
      KBEngine.Event.fire("enterScene");
    }
  },
  onSetSpaceData: function onSetSpaceData() {
    cc.log("initSpaceDatainitSpaceDatainitSpaceDatainitSpaceData");
    KBEngine.Event.fire("onSetSpaceData");
  },
  decodeEncryptedData: function decodeEncryptedData() {
    var encryptedData = cc.sys.localStorage.getItem("encryptedData");
    var iv = cc.sys.localStorage.getItem("iv");
    cc.log("encryptedData && iv", encryptedData, iv);

    if (encryptedData && iv) {
      cc.log("decodeEncryptedData");
      this.baseCall("decodeEncryptedData", encryptedData, iv);
    }
  },
  reqChangeReadyState: function reqChangeReadyState() {
    this.cellCall("reqChangeReadyState", 1);
  },
  playerReadyStateChange: function playerReadyStateChange(eid, state) {
    if (this.isPlayer()) {
      KBEngine.Event.fire("playerReadyStateChange", eid, state);
    }
  },
  quick_chat: function quick_chat(idx) {
    cc.log("quick_chat:cellCall", idx);
    this.cellCall("quick_chat", idx);
  },
  emoji: function emoji(name) {
    cc.log("emoji:cellCall", name);
    this.cellCall("emoji", name);
  },
  iptChat: function iptChat(strstr) {
    cc.log("iptChat:cellCall", strstr);
    this.cellCall("iptChat", strstr);
  },
  onquick_chat: function onquick_chat(eid, idx) {
    cc.log("quick_chat:receive", eid, idx);

    if (this.isPlayer()) {
      KBEngine.Event.fire("onquick_chat", eid, idx);
    }
  },
  onjoinPrivateRoom: function onjoinPrivateRoom(num) {
    cc.log("onjoinPrivateRoom", num);

    if (this.isPlayer()) {
      KBEngine.Event.fire("onjoinPrivateRoom", num);
    }
  },
  onemoji: function onemoji(eid, name) {
    cc.log("emoji:receive", eid, name);

    if (this.isPlayer()) {
      KBEngine.Event.fire("onemoji", eid, name);
    }
  },
  oniptChat: function oniptChat(eid, strstr) {
    cc.log("iptChat:receive", eid, strstr);

    if (this.isPlayer()) {
      KBEngine.Event.fire("oniptChat", eid, strstr);
    }
  },
  joinRoom: function joinRoom() {
    KBEngine.INFO_MSG("avatar " + this.id + " join room");
    this.baseCall("joinRoom");
  },
  createPrivateRoom: function createPrivateRoom() {
    KBEngine.INFO_MSG("avatar " + this.id + " createPrivateRoom");
    this.baseCall("createPrivateRoom");
  },
  joinPrivateRoom: function joinPrivateRoom(roomkey) {
    KBEngine.INFO_MSG("avatar " + this.id + " joinPrivateRoom" + roomkey);
    this.baseCall("joinPrivateRoom", roomkey);
  },
  game_begin_push: function game_begin_push(holds) {
    cc.log("Avatar::game_begin_push");

    if (this.isPlayer()) {
      KBEngine.Event.fire("game_begin_push", this);
    }
  },
  onEnterWorld: function onEnterWorld() {
    cc.log("avatar.onEnterWorld.......");

    this._super();

    if (this.isPlayer()) {
      KBEngine.Event.fire("onAvatarEnterWorld", this);
    }
  },
  onEnterWorld2: function onEnterWorld2(eid) {
    cc.log("avatar.onEnterWorld2.......", this.id, KBEngine.app.entity_id); //this._super();

    if (this.isPlayer()) {
      KBEngine.Event.fire("onEnterWorld2", eid);
    }
  },
  startWalk: function startWalk(moveFlag) {
    KBEngine.INFO_MSG("avatar " + this.id + " start walk: " + moveFlag);
    this.cellCall("startWalk", moveFlag);
  },
  onStartWalk: function onStartWalk(moveFlag) {
    KBEngine.INFO_MSG("other avatar " + this.id + " on start walk: " + moveFlag);
    KBEngine.Event.fire("otherAvatarOnStartWalk", this.id, moveFlag);
  },
  stopWalk: function stopWalk(pos) {
    cc.log("avatar %d stop walk, pos(%f, %f)", this.id, pos.x, pos.y);
    var vec3 = new KBEngine.Vector3();
    vec3.x = pos.x;
    vec3.y = pos.y;
    vec3.z = 0.0;
    this.cellCall("stopWalk", pos);
  },
  onStopWalk: function onStopWalk(pos) {
    var v2 = new cc.Vec2();
    v2.x = pos.x;
    v2.y = pos.y;
    cc.log("other avatar %d stop walk, pos(%f, %f)", this.id, v2.x, v2.y);
    KBEngine.Event.fire("otherAvatarOnStopWalk", this.id, v2);
  },
  jump: function jump() {
    cc.log("avatar %d cell jump", this.id);
    this.cellCall("jump");
  },
  onJump: function onJump() {
    cc.log("other avatar %d on jump", this.id);
    KBEngine.Event.fire("otherAvatarOnJump", this);
  },
  rightJump: function rightJump() {
    this.cellCall("rightJump");
    KBEngine.INFO_MSG("avatar " + this.id + " right jump");
  },
  onRightJump: function onRightJump() {
    KBEngine.Event.fire("otherAvatarOnRightJump", this.id);
  },
  leftJump: function leftJump() {
    this.cellCall("leftJump");
    KBEngine.INFO_MSG("avatar " + this.id + " left jump");
  },
  onLeftJump: function onLeftJump() {
    KBEngine.Event.fire("otherAvatarOnLeftJump", this.id);
  },
  onPickUpItem: function onPickUpItem(itemID, positon) {
    var point = new cc.Vec2(positon.x, positon.y);
    KBEngine.Event.fire("otherAvatarOnPickUpItem", this.id, itemID, point);
  },
  pickUpItem: function pickUpItem(itemID, pos) {
    var vec3 = new KBEngine.Vector3();
    vec3.x = pos.x;
    vec3.y = pos.y;
    vec3.z = 0.0;
    this.cellCall("pickUpItem", itemID, vec3);
  },
  //把力道给每个客户端，根本不会记录最终位置坐标到服务器，所以断线重连后Item的位置坐标都是起始值            
  throwItem: function throwItem(itemID, force) {
    var vec3 = new KBEngine.Vector3();
    vec3.x = force.x;
    vec3.y = force.y;
    vec3.z = 0.0;
    this.cellCall("throwItem", itemID, vec3);
  },
  onThrowItem: function onThrowItem(itemID, force) {
    var v2 = new cc.Vec2(force.x, force.y);
    KBEngine.Event.fire("otherAvatarThrowItem", this.id, itemID, v2);
  },
  onNewTurn: function onNewTurn(eid, second, card1, card2, card3, card4) {
    KBEngine.INFO_MSG("avatar " + eid + " on new turn");
    KBEngine.Event.fire("newTurn", this, eid, second, card1, card2, card3, card4);
  },
  onsureact: function onsureact(strr) {
    this.cellCall("onsureact", strr);
  },
  onsyncsureact: function onsyncsureact(eid, strr) {
    cc.log("avatar::onsyncsureact== ", strr); //KBEngine.Event.fire("onsyncsureact", strr);

    if (this.isPlayer()) {
      KBEngine.Event.fire("oniptChat", eid, strr);
    }
  },
  newTurn: function newTurn() {
    this.cellCall("newTurn");
  },
  //捡起石头，时间到了，不扔石头，就还原石头的位置
  recoverItem: function recoverItem(itemID) {
    this.cellCall("recoverItem", itemID);
  },
  onRecoverItem: function onRecoverItem(itemID) {
    KBEngine.Event.fire("otherAvatarRecoverItem", this.id, itemID);
  },
  recvDamage: function recvDamage(itemID) {
    this.cellCall("recvDamage", itemID);
    KBEngine.INFO_MSG("avatar " + this.id + " recvDamage from item=" + itemID);
  },
  onRecvDamage: function onRecvDamage(avatarID, harm, hp) {
    KBEngine.INFO_MSG("avatar " + avatarID + " recv harm=" + harm + " hp=" + hp);
    KBEngine.Event.fire("onRecvDamage", avatarID, harm, hp);
  },
  onupdateGamestates: function onupdateGamestates(curID, time) {
    KBEngine.INFO_MSG("onupdateGamestates " + curID + "/" + time);
    KBEngine.Event.fire("onupdateGamestates", curID, time);
  },
  onotherNetcut: function onotherNetcut(avatarID) {
    KBEngine.INFO_MSG("avatar " + avatarID + " Netcut");
    KBEngine.Event.fire("onotherNetcut", avatarID);
  },
  onDie: function onDie(avatarID) {
    KBEngine.INFO_MSG("avatar " + avatarID + " die");
    KBEngine.Event.fire("onAvatarDie", avatarID);
  },
  onGameOver: function onGameOver(isWin, hitRate, totalTime, totalHarm, score) {
    KBEngine.INFO_MSG("Game is over: avatar " + this.id + "win= " + isWin.toString());
    KBEngine.Event.fire("onGameOver", this.id, isWin, hitRate, totalTime, totalHarm, score);
  },
  updategamestuts: function updategamestuts(num) {
    KBEngine.Event.fire("updategamestuts", num);
  },
  //石头出界，重置石头
  resetItem: function resetItem(itemID) {
    KBEngine.INFO_MSG("reset item ......");
    this.cellCall("resetItem", itemID);
  },
  uploaditempos: function uploaditempos(itemID, itempos) {
    KBEngine.INFO_MSG("uploaditempos ......");
    this.cellCall("uploaditempos", itemID, itempos);
  },
  onResetItem: function onResetItem(itemID, position) {
    KBEngine.INFO_MSG("on reset item position(" + position.x + ", " + position.y + ", " + position.z + ")");
    KBEngine.Event.fire("onResetItem", itemID, position);
  },
  //没石头扔，就产生石头
  addItem: function addItem(left) {
    KBEngine.INFO_MSG("add item ......: " + left.toString());
    this.cellCall("addItem", left);
  },
  continueGame: function continueGame() {
    this.cellCall("continueGame");
    KBEngine.INFO_MSG("avatar " + this.id + " continue game");
  },
  onContinueGame: function onContinueGame(avatarID) {
    KBEngine.INFO_MSG("avatar " + avatarID + "on continue game, local avatarID=" + this.id); //KBEngine.Event.fire("onAvatarEnterWorld", KBEngine.app.entity_uuid, this.id, this);

    KBEngine.Event.fire("onAvatarEnterWorld", this);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xca2JlX3NjcmlwdHNcXEF2YXRhci5qcyJdLCJuYW1lcyI6WyJLQkVuZ2luZSIsInJlcXVpcmUiLCJBdmF0YXIiLCJFbnRpdHkiLCJleHRlbmQiLCJfX2luaXRfXyIsIl9zdXBlciIsImlzUGxheWVyIiwiY2MiLCJsb2ciLCJ3aW5kb3ciLCJ3eCIsInVuZGVmaW5lZCIsInN5cyIsInBsYXRmb3JtIiwiV0VDSEFUX0dBTUUiLCJkZWNvZGVFbmNyeXB0ZWREYXRhIiwiRXZlbnQiLCJmaXJlIiwib25TZXRTcGFjZURhdGEiLCJlbmNyeXB0ZWREYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIml2IiwiYmFzZUNhbGwiLCJyZXFDaGFuZ2VSZWFkeVN0YXRlIiwiY2VsbENhbGwiLCJwbGF5ZXJSZWFkeVN0YXRlQ2hhbmdlIiwiZWlkIiwic3RhdGUiLCJxdWlja19jaGF0IiwiaWR4IiwiZW1vamkiLCJuYW1lIiwiaXB0Q2hhdCIsInN0cnN0ciIsIm9ucXVpY2tfY2hhdCIsIm9uam9pblByaXZhdGVSb29tIiwibnVtIiwib25lbW9qaSIsIm9uaXB0Q2hhdCIsImpvaW5Sb29tIiwiSU5GT19NU0ciLCJpZCIsImNyZWF0ZVByaXZhdGVSb29tIiwiam9pblByaXZhdGVSb29tIiwicm9vbWtleSIsImdhbWVfYmVnaW5fcHVzaCIsImhvbGRzIiwib25FbnRlcldvcmxkIiwib25FbnRlcldvcmxkMiIsImFwcCIsImVudGl0eV9pZCIsInN0YXJ0V2FsayIsIm1vdmVGbGFnIiwib25TdGFydFdhbGsiLCJzdG9wV2FsayIsInBvcyIsIngiLCJ5IiwidmVjMyIsIlZlY3RvcjMiLCJ6Iiwib25TdG9wV2FsayIsInYyIiwiVmVjMiIsImp1bXAiLCJvbkp1bXAiLCJyaWdodEp1bXAiLCJvblJpZ2h0SnVtcCIsImxlZnRKdW1wIiwib25MZWZ0SnVtcCIsIm9uUGlja1VwSXRlbSIsIml0ZW1JRCIsInBvc2l0b24iLCJwb2ludCIsInBpY2tVcEl0ZW0iLCJ0aHJvd0l0ZW0iLCJmb3JjZSIsIm9uVGhyb3dJdGVtIiwib25OZXdUdXJuIiwic2Vjb25kIiwiY2FyZDEiLCJjYXJkMiIsImNhcmQzIiwiY2FyZDQiLCJvbnN1cmVhY3QiLCJzdHJyIiwib25zeW5jc3VyZWFjdCIsIm5ld1R1cm4iLCJyZWNvdmVySXRlbSIsIm9uUmVjb3Zlckl0ZW0iLCJyZWN2RGFtYWdlIiwib25SZWN2RGFtYWdlIiwiYXZhdGFySUQiLCJoYXJtIiwiaHAiLCJvbnVwZGF0ZUdhbWVzdGF0ZXMiLCJjdXJJRCIsInRpbWUiLCJvbm90aGVyTmV0Y3V0Iiwib25EaWUiLCJvbkdhbWVPdmVyIiwiaXNXaW4iLCJoaXRSYXRlIiwidG90YWxUaW1lIiwidG90YWxIYXJtIiwic2NvcmUiLCJ0b1N0cmluZyIsInVwZGF0ZWdhbWVzdHV0cyIsInJlc2V0SXRlbSIsInVwbG9hZGl0ZW1wb3MiLCJpdGVtcG9zIiwib25SZXNldEl0ZW0iLCJwb3NpdGlvbiIsImFkZEl0ZW0iLCJsZWZ0IiwiY29udGludWVHYW1lIiwib25Db250aW51ZUdhbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7OztBQUlBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUFELFFBQVEsQ0FBQ0UsTUFBVCxHQUFrQkYsUUFBUSxDQUFDRyxNQUFULENBQWdCQyxNQUFoQixDQUF1QjtBQUNqQ0MsRUFBQUEsUUFBUSxFQUFHLG9CQUNYO0FBQ0ksU0FBS0MsTUFBTDs7QUFDQSxRQUFHLEtBQUtDLFFBQUwsRUFBSCxFQUFvQjtBQUNoQkMsTUFBQUEsRUFBRSxDQUFDQyxHQUFILENBQU8sc0NBQVAsRUFBOENDLE1BQU0sQ0FBQ0MsRUFBUCxJQUFhQyxTQUEzRDs7QUFDQSxVQUFHSixFQUFFLENBQUNLLEdBQUgsQ0FBT0MsUUFBUCxJQUFtQk4sRUFBRSxDQUFDSyxHQUFILENBQU9FLFdBQTdCLEVBQXlDO0FBQ3JDLGFBQUtDLG1CQUFMO0FBQ0g7O0FBQ0RSLE1BQUFBLEVBQUUsQ0FB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QVQsQ0FBa0IsWUFBWSxLQUFLQyxFQUFqQixHQUFzQixnQkFBeEM7QUFDSCxHQTlTZ0M7QUFnVGpDMkUsRUFBQUEsY0FBYyxFQUFFLHdCQUFTeEIsUUFBVCxFQUNoQjtBQUNJOUYsSUFBQUEsUUFBUSxDQUFDMEMsUUFBVCxDQUFrQixZQUFZb0QsUUFBWixHQUF1QixtQ0FBdkIsR0FBNkQsS0FBS25ELEVBQXBGLEVBREosQ0FFSTs7QUFDQTNDLElBQUFBLFFBQVEsQ0FBQ2lCLEtBQVQsQ0FBZUMsSUFBZixDQUFvQixvQkFBcEIsRUFBeUMsSUFBekM7QUFDSDtBQXJUZ0MsQ0FBdkIsQ0FBbEIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZW50aXR5XHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbnZhciBLQkVuZ2luZSA9IHJlcXVpcmUoXCJrYmVuZ2luZVwiKTtcclxuXHJcbktCRW5naW5lLkF2YXRhciA9IEtCRW5naW5lLkVudGl0eS5leHRlbmQoe1xyXG4gICAgICAgIF9faW5pdF9fIDogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc3VwZXIoKTtcclxuICAgICAgICAgICAgaWYodGhpcy5pc1BsYXllcigpKSB7XHJcbiAgICAgICAgICAgICAgICBjYy5sb2coXCJ3aW5kb3cud3ggIT0gdW5kZWZpbmVkIHx8IHdpbmRvdy53Yz1cIix3aW5kb3cud3ggIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgaWYoY2Muc3lzLnBsYXRmb3JtID09IGNjLnN5cy5XRUNIQVRfR0FNRSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNvZGVFbmNyeXB0ZWREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2MubG9nKFwiS0JFbmdpbmUuQXZhdGFyLl9pbml0X1wiKVxyXG4gICAgICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcImVudGVyU2NlbmVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU2V0U3BhY2VEYXRhOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcImluaXRTcGFjZURhdGFpbml0U3BhY2VEYXRhaW5pdFNwYWNlRGF0YWluaXRTcGFjZURhdGFcIilcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm9uU2V0U3BhY2VEYXRhXCIpO1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlY29kZUVuY3J5cHRlZERhdGE6IGZ1bmN0aW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBlbmNyeXB0ZWREYXRhID0gY2Muc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZW5jcnlwdGVkRGF0YVwiKTtcclxuICAgICAgICAgICAgdmFyIGl2ID0gY2Muc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaXZcIik7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcImVuY3J5cHRlZERhdGEgJiYgaXZcIixlbmNyeXB0ZWREYXRhICwgaXYpXHJcbiAgICAgICAgICAgIGlmKGVuY3J5cHRlZERhdGEgJiYgaXYpIHtcclxuICAgICAgICAgICAgICAgIGNjLmxvZyhcImRlY29kZUVuY3J5cHRlZERhdGFcIilcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZUNhbGwoXCJkZWNvZGVFbmNyeXB0ZWREYXRhXCIsIGVuY3J5cHRlZERhdGEsIGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVxQ2hhbmdlUmVhZHlTdGF0ZTpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwicmVxQ2hhbmdlUmVhZHlTdGF0ZVwiLDEpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGxheWVyUmVhZHlTdGF0ZUNoYW5nZTpmdW5jdGlvbihlaWQsc3RhdGUpe1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJwbGF5ZXJSZWFkeVN0YXRlQ2hhbmdlXCIsIGVpZCxzdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBxdWlja19jaGF0OmZ1bmN0aW9uKGlkeCl7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcInF1aWNrX2NoYXQ6Y2VsbENhbGxcIixpZHgpXHJcbiAgICAgICAgICAgIHRoaXMuY2VsbENhbGwoXCJxdWlja19jaGF0XCIsaWR4KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVtb2ppOmZ1bmN0aW9uKG5hbWUpe1xyXG4gICAgICAgICAgICBjYy5sb2coXCJlbW9qaTpjZWxsQ2FsbFwiLG5hbWUpXHJcbiAgICAgICAgICAgIHRoaXMuY2VsbENhbGwoXCJlbW9qaVwiLG5hbWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXB0Q2hhdDpmdW5jdGlvbihzdHJzdHIpe1xyXG4gICAgICAgICAgICBjYy5sb2coXCJpcHRDaGF0OmNlbGxDYWxsXCIsc3Ryc3RyKVxyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwiaXB0Q2hhdFwiLHN0cnN0cik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbnF1aWNrX2NoYXQ6ZnVuY3Rpb24oZWlkLGlkeCl7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcInF1aWNrX2NoYXQ6cmVjZWl2ZVwiLGVpZCxpZHgpXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXNQbGF5ZXIoKSkge1xyXG4gICAgICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm9ucXVpY2tfY2hhdFwiLCBlaWQsaWR4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25qb2luUHJpdmF0ZVJvb206ZnVuY3Rpb24obnVtKXtcclxuICAgICAgICAgICAgY2MubG9nKFwib25qb2luUHJpdmF0ZVJvb21cIiwgbnVtKVxyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvbmpvaW5Qcml2YXRlUm9vbVwiLCBudW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbmVtb2ppOmZ1bmN0aW9uKGVpZCxuYW1lKXtcclxuICAgICAgICAgICAgY2MubG9nKFwiZW1vamk6cmVjZWl2ZVwiLGVpZCxuYW1lKVxyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvbmVtb2ppXCIsIGVpZCxuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25pcHRDaGF0OmZ1bmN0aW9uKGVpZCxzdHJzdHIpe1xyXG4gICAgICAgICAgICBjYy5sb2coXCJpcHRDaGF0OnJlY2VpdmVcIixlaWQsc3Ryc3RyKVxyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvbmlwdENoYXRcIiwgZWlkLHN0cnN0cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGpvaW5Sb29tOiBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiBqb2luIHJvb21cIik7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZUNhbGwoXCJqb2luUm9vbVwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZVByaXZhdGVSb29tOiBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiBjcmVhdGVQcml2YXRlUm9vbVwiKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlQ2FsbChcImNyZWF0ZVByaXZhdGVSb29tXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgam9pblByaXZhdGVSb29tOiBmdW5jdGlvbihyb29ta2V5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgS0JFbmdpbmUuSU5GT19NU0coXCJhdmF0YXIgXCIgKyB0aGlzLmlkICsgXCIgam9pblByaXZhdGVSb29tXCIrIHJvb21rZXkpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VDYWxsKFwiam9pblByaXZhdGVSb29tXCIscm9vbWtleSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnYW1lX2JlZ2luX3B1c2g6ZnVuY3Rpb24oaG9sZHMpICAge1xyXG4gICAgICAgICAgICBjYy5sb2coXCJBdmF0YXI6OmdhbWVfYmVnaW5fcHVzaFwiKVxyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJnYW1lX2JlZ2luX3B1c2hcIix0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25FbnRlcldvcmxkIDogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2MubG9nKFwiYXZhdGFyLm9uRW50ZXJXb3JsZC4uLi4uLi5cIilcclxuICAgICAgICAgICAgdGhpcy5fc3VwZXIoKTtcclxuICAgICAgICAgICAgaWYodGhpcy5pc1BsYXllcigpKSB7XHJcbiAgICAgICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib25BdmF0YXJFbnRlcldvcmxkXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHRcdFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25FbnRlcldvcmxkMiA6IGZ1bmN0aW9uKGVpZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcImF2YXRhci5vbkVudGVyV29ybGQyLi4uLi4uLlwiLHRoaXMuaWQgLCBLQkVuZ2luZS5hcHAuZW50aXR5X2lkKVxyXG5cclxuICAgICAgICAgICAgLy90aGlzLl9zdXBlcigpO1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvbkVudGVyV29ybGQyXCIsIGVpZCk7XHJcbiAgICAgICAgICAgIH1cdFx0XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3RhcnRXYWxrOiBmdW5jdGlvbihtb3ZlRmxhZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLklORk9fTVNHKFwiYXZhdGFyIFwiICsgdGhpcy5pZCArIFwiIHN0YXJ0IHdhbGs6IFwiICsgbW92ZUZsYWcpO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwic3RhcnRXYWxrXCIsIG1vdmVGbGFnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblN0YXJ0V2FsazogZnVuY3Rpb24obW92ZUZsYWcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcIm90aGVyIGF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiBvbiBzdGFydCB3YWxrOiBcIiArIG1vdmVGbGFnKTtcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm90aGVyQXZhdGFyT25TdGFydFdhbGtcIiwgdGhpcy5pZCwgbW92ZUZsYWcpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0b3BXYWxrOiBmdW5jdGlvbihwb3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYy5sb2coXCJhdmF0YXIgJWQgc3RvcCB3YWxrLCBwb3MoJWYsICVmKVwiLCB0aGlzLmlkLCBwb3MueCwgcG9zLnkpOyAgIFxyXG4gICAgICAgICAgICB2YXIgdmVjMyA9IG5ldyBLQkVuZ2luZS5WZWN0b3IzKCk7XHJcbiAgICAgICAgICAgIHZlYzMueCA9IHBvcy54O1xyXG4gICAgICAgICAgICB2ZWMzLnkgPSBwb3MueTtcclxuICAgICAgICAgICAgdmVjMy56ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwic3RvcFdhbGtcIiwgcG9zKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblN0b3BXYWxrOiBmdW5jdGlvbihwb3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgdjIgPSBuZXcgY2MuVmVjMigpO1xyXG4gICAgICAgICAgICB2Mi54ID0gcG9zLng7XHJcbiAgICAgICAgICAgIHYyLnkgPSBwb3MueTtcclxuICAgICAgICAgICAgY2MubG9nKFwib3RoZXIgYXZhdGFyICVkIHN0b3Agd2FsaywgcG9zKCVmLCAlZilcIiwgdGhpcy5pZCwgdjIueCwgdjIueSk7ICAgXHJcbiAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvdGhlckF2YXRhck9uU3RvcFdhbGtcIiwgdGhpcy5pZCwgdjIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGp1bXAgOiBmdW5jdGlvbigpXHJcblx0ICAgIHtcclxuICAgICAgICAgICAgY2MubG9nKFwiYXZhdGFyICVkIGNlbGwganVtcFwiLCB0aGlzLmlkKTtcclxuXHRcdCAgICB0aGlzLmNlbGxDYWxsKFwianVtcFwiKTtcclxuICAgICAgICB9LCBcclxuXHJcbiAgICAgICAgb25KdW1wIDogZnVuY3Rpb24oKVxyXG5cdCAgICB7XHJcbiAgICAgICAgICAgIGNjLmxvZyhcIm90aGVyIGF2YXRhciAlZCBvbiBqdW1wXCIsIHRoaXMuaWQpO1xyXG5cdFx0ICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvdGhlckF2YXRhck9uSnVtcFwiLCB0aGlzKTtcclxuICAgICAgICB9LCBcclxuXHJcbiAgICAgICAgcmlnaHRKdW1wOiBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwicmlnaHRKdW1wXCIpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiByaWdodCBqdW1wXCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uUmlnaHRKdW1wOiBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib3RoZXJBdmF0YXJPblJpZ2h0SnVtcFwiLCB0aGlzLmlkKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBsZWZ0SnVtcDogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jZWxsQ2FsbChcImxlZnRKdW1wXCIpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiBsZWZ0IGp1bXBcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25MZWZ0SnVtcDogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm90aGVyQXZhdGFyT25MZWZ0SnVtcFwiLCB0aGlzLmlkKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblBpY2tVcEl0ZW0gOiBmdW5jdGlvbihpdGVtSUQsIHBvc2l0b24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBuZXcgY2MuVmVjMihwb3NpdG9uLngsIHBvc2l0b24ueSk7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvdGhlckF2YXRhck9uUGlja1VwSXRlbVwiLCB0aGlzLmlkLCBpdGVtSUQsIHBvaW50KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwaWNrVXBJdGVtIDogZnVuY3Rpb24oaXRlbUlELCBwb3MpXHJcblx0ICAgIHtcclxuICAgICAgICAgICAgdmFyIHZlYzMgPSBuZXcgS0JFbmdpbmUuVmVjdG9yMygpO1xyXG4gICAgICAgICAgICB2ZWMzLnggPSBwb3MueDtcclxuICAgICAgICAgICAgdmVjMy55ID0gcG9zLnk7XHJcbiAgICAgICAgICAgIHZlYzMueiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5jZWxsQ2FsbChcInBpY2tVcEl0ZW1cIiwgaXRlbUlELCB2ZWMzKTtcclxuICAgICAgICB9LCBcclxuICAgICAgICAvL+aKiuWKm+mBk+e7meavj+S4quWuouaIt+err++8jOagueacrOS4jeS8muiusOW9leacgOe7iOS9jee9ruWdkOagh+WIsOacjeWKoeWZqO+8jOaJgOS7peaWree6v+mHjei/nuWQjkl0ZW3nmoTkvY3nva7lnZDmoIfpg73mmK/otbflp4vlgLwgICAgICAgICAgICBcclxuICAgICAgICB0aHJvd0l0ZW0gOiBmdW5jdGlvbihpdGVtSUQsIGZvcmNlKSAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgdmVjMyA9IG5ldyBLQkVuZ2luZS5WZWN0b3IzKCk7XHJcbiAgICAgICAgICAgIHZlYzMueCA9IGZvcmNlLng7XHJcbiAgICAgICAgICAgIHZlYzMueSA9IGZvcmNlLnk7XHJcbiAgICAgICAgICAgIHZlYzMueiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5jZWxsQ2FsbChcInRocm93SXRlbVwiLCBpdGVtSUQsIHZlYzMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgIFxyXG4gICAgICAgIG9uVGhyb3dJdGVtIDogZnVuY3Rpb24oaXRlbUlELCBmb3JjZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciB2MiA9IG5ldyBjYy5WZWMyKGZvcmNlLngsIGZvcmNlLnkpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib3RoZXJBdmF0YXJUaHJvd0l0ZW1cIiwgdGhpcy5pZCwgaXRlbUlELCB2Mik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25OZXdUdXJuIDogZnVuY3Rpb24oZWlkLHNlY29uZCxjYXJkMSxjYXJkMixjYXJkMyxjYXJkNClcclxuXHQgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIGVpZCArIFwiIG9uIG5ldyB0dXJuXCIpO1xyXG5cdFx0ICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJuZXdUdXJuXCIsIHRoaXMsZWlkLHNlY29uZCxjYXJkMSxjYXJkMixjYXJkMyxjYXJkNCk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgb25zdXJlYWN0OmZ1bmN0aW9uKHN0cnIpe1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwib25zdXJlYWN0XCIsIHN0cnIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25zeW5jc3VyZWFjdDpmdW5jdGlvbihlaWQgLCBzdHJyKXtcclxuICAgICAgICAgICAgY2MubG9nKFwiYXZhdGFyOjpvbnN5bmNzdXJlYWN0PT0gXCIsIHN0cnIpO1xyXG4gICAgICAgICAgICAvL0tCRW5naW5lLkV2ZW50LmZpcmUoXCJvbnN5bmNzdXJlYWN0XCIsIHN0cnIpO1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzUGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIEtCRW5naW5lLkV2ZW50LmZpcmUoXCJvbmlwdENoYXRcIiwgZWlkLHN0cnIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV3VHVybiA6IGZ1bmN0aW9uKClcclxuXHQgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwibmV3VHVyblwiKTtcclxuICAgICAgICB9LCBcclxuXHJcbiAgICAgICAgLy/mjaHotbfnn7PlpLTvvIzml7bpl7TliLDkuobvvIzkuI3miZTnn7PlpLTvvIzlsLHov5jljp/nn7PlpLTnmoTkvY3nva5cclxuICAgICAgICByZWNvdmVySXRlbTogZnVuY3Rpb24oaXRlbUlEKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jZWxsQ2FsbChcInJlY292ZXJJdGVtXCIsIGl0ZW1JRCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25SZWNvdmVySXRlbTogZnVuY3Rpb24oaXRlbUlEKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm90aGVyQXZhdGFyUmVjb3Zlckl0ZW1cIiwgdGhpcy5pZCwgaXRlbUlEKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZWN2RGFtYWdlOiBmdW5jdGlvbihpdGVtSUQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwicmVjdkRhbWFnZVwiLCBpdGVtSUQpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIHRoaXMuaWQgKyBcIiByZWN2RGFtYWdlIGZyb20gaXRlbT1cIiArIGl0ZW1JRCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25SZWN2RGFtYWdlOiBmdW5jdGlvbihhdmF0YXJJRCwgaGFybSwgaHApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIGF2YXRhcklEICsgXCIgcmVjdiBoYXJtPVwiICsgaGFybSArIFwiIGhwPVwiICsgaHApO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib25SZWN2RGFtYWdlXCIsIGF2YXRhcklELCBoYXJtLCBocCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbnVwZGF0ZUdhbWVzdGF0ZXM6ZnVuY3Rpb24oY3VySUQsdGltZSl7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLklORk9fTVNHKFwib251cGRhdGVHYW1lc3RhdGVzIFwiICsgY3VySUQgKyBcIi9cIiArIHRpbWUpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib251cGRhdGVHYW1lc3RhdGVzXCIsIGN1cklELHRpbWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25vdGhlck5ldGN1dDogZnVuY3Rpb24oYXZhdGFySUQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIGF2YXRhcklEICsgXCIgTmV0Y3V0XCIpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib25vdGhlck5ldGN1dFwiLCBhdmF0YXJJRCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRpZTogZnVuY3Rpb24oYXZhdGFySUQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIGF2YXRhcklEICsgXCIgZGllXCIpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib25BdmF0YXJEaWVcIiwgYXZhdGFySUQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uR2FtZU92ZXI6IGZ1bmN0aW9uKGlzV2luLCBoaXRSYXRlLCB0b3RhbFRpbWUsIHRvdGFsSGFybSwgc2NvcmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcIkdhbWUgaXMgb3ZlcjogYXZhdGFyIFwiICsgdGhpcy5pZCArIFwid2luPSBcIiArIGlzV2luLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwib25HYW1lT3ZlclwiLCB0aGlzLmlkLCBpc1dpbiwgaGl0UmF0ZSwgdG90YWxUaW1lLCB0b3RhbEhhcm0sIHNjb3JlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZWdhbWVzdHV0czpmdW5jdGlvbihudW0pe1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5FdmVudC5maXJlKFwidXBkYXRlZ2FtZXN0dXRzXCIsbnVtKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8v55+z5aS05Ye655WM77yM6YeN572u55+z5aS0XHJcbiAgICAgICAgcmVzZXRJdGVtOiBmdW5jdGlvbihpdGVtSUQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcInJlc2V0IGl0ZW0gLi4uLi4uXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxDYWxsKFwicmVzZXRJdGVtXCIsIGl0ZW1JRCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cGxvYWRpdGVtcG9zOiBmdW5jdGlvbihpdGVtSUQsaXRlbXBvcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLklORk9fTVNHKFwidXBsb2FkaXRlbXBvcyAuLi4uLi5cIik7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbENhbGwoXCJ1cGxvYWRpdGVtcG9zXCIsIGl0ZW1JRCxpdGVtcG9zKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblJlc2V0SXRlbTogZnVuY3Rpb24oaXRlbUlELCBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLklORk9fTVNHKFwib24gcmVzZXQgaXRlbSBwb3NpdGlvbihcIiArIHBvc2l0aW9uLnggKyBcIiwgXCIgKyBwb3NpdGlvbi55ICsgXCIsIFwiICsgcG9zaXRpb24ueiArIFwiKVwiKTtcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm9uUmVzZXRJdGVtXCIsIGl0ZW1JRCwgcG9zaXRpb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8v5rKh55+z5aS05omU77yM5bCx5Lqn55Sf55+z5aS0XHJcbiAgICAgICAgYWRkSXRlbTogZnVuY3Rpb24obGVmdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEtCRW5naW5lLklORk9fTVNHKFwiYWRkIGl0ZW0gLi4uLi4uOiBcIiArIGxlZnQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbENhbGwoXCJhZGRJdGVtXCIsIGxlZnQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNvbnRpbnVlR2FtZTogZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jZWxsQ2FsbChcImNvbnRpbnVlR2FtZVwiKTtcclxuICAgICAgICAgICAgS0JFbmdpbmUuSU5GT19NU0coXCJhdmF0YXIgXCIgKyB0aGlzLmlkICsgXCIgY29udGludWUgZ2FtZVwiKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNvbnRpbnVlR2FtZTogZnVuY3Rpb24oYXZhdGFySUQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBLQkVuZ2luZS5JTkZPX01TRyhcImF2YXRhciBcIiArIGF2YXRhcklEICsgXCJvbiBjb250aW51ZSBnYW1lLCBsb2NhbCBhdmF0YXJJRD1cIiArIHRoaXMuaWQpO1xyXG4gICAgICAgICAgICAvL0tCRW5naW5lLkV2ZW50LmZpcmUoXCJvbkF2YXRhckVudGVyV29ybGRcIiwgS0JFbmdpbmUuYXBwLmVudGl0eV91dWlkLCB0aGlzLmlkLCB0aGlzKTtcclxuICAgICAgICAgICAgS0JFbmdpbmUuRXZlbnQuZmlyZShcIm9uQXZhdGFyRW50ZXJXb3JsZFwiLHRoaXMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAiXX0=